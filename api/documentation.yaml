openapi: 3.0.3
info:
  title: Career Path API Documentation.
  description: |-
    Career Path is an app that offers personalized career path recommendations and a platform to build professional CVs. 
    Users can upload a CV or connect their LinkedIn profile for analysis. Powered by machine learning, the app tailors 
    career suggestions to individual skills and experience, while also providing CV creation tools.
  version: 1.0.0

servers:
  - url: 'https://careerpath-api-laplace.bccdev.id/api/v1'
    description: Production server (uses live data)
  - url: 'https://sandbox-careerpath.akbarfikri.my.id/api/v1'
    description: Sandbox server (uses test data)

tags:
  - name: Authentication
    description: Its a group that provided all feature about authentication.
  - name: Resume
    description: Its a group that provided all feature about Resume Builder, Scoring.

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: 12345678
                  description: mininum length is 8 and maximum length is 32
                name:
                  type: string
                  example: test user
      responses:
        "201":
          description: means the user successfully created, and no contest send.
        "409":
          description: means the user with email provided already exist can't create again.
        "422":
          description: means that the requirements in the request body are not met correctly.

  /auth/sigin:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: 12345678
      responses:
        "200":
          description: means the user successfully signin.
          content:
            application/json:
              schema:
                type: object
                required:
                  - sessionID
                  - refreshToken
                  - accessToken
                  - expiresInSecond
                properties:
                  sessionID:
                    type: string
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  expiresInSecond:
                    type: integer
                    description: represents how many seconds the access token will be valid starting from the creation of the access token
        "400":
          description: means the user email or password wrong.
        "422":
          description: means that the requirements in the request body are not met correctly.

  /auth/refresh:
    post:
      tags:
        - Authentication
      parameters:
        - in: query
          name: sessionID
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: jsadiuicu9wjaisdjaskdkmnsvnbasdwqfved
      responses:
        "200":
          description: means the user successfully signin.
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - expiresInSecond
                properties:
                  accessToken:
                    type: string
                  expiresInSecond:
                    type: integer
                    description: represents how many seconds the access token will be valid starting from the creation of the access token
        "401":
          description: means the sessionID or refreshToken wrong/expired.
        "422":
          description: means that the requirements in the request body or query are not met correctly.

  /oauth/{provider}:
    get:
      tags:
        - Authentication
      parameters:
        - in: query
          name: code
          required: true
        - in: path
          name: provider
          required: true
          description: contains one value "google"
      responses:
        "200":
          description: means the user successfully signin with oauth provider.
          content:
            application/json:
              schema:
                type: object
                required:
                  - sessionID
                  - refreshToken
                  - accessToken
                  - expiresInSecond
                properties:
                  sessionID:
                    type: string
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  expiresInSecond:
                    type: integer
                    description: represents how many seconds the access token will be valid starting from the creation of the access token
        "400":
          description: means the code from oauth is invalid, maybe caused code already claim.
        "422":
          description: means that the requirements in the request body are not met correctly.

  /resume:
    post:
      tags:
        - Resume
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        "201":
          description: means the resume successfully created, and no contest send.
        "400":
          description: unauthorized access token.
        "422":
          description: means that the requirements in the request body are not met correctly.
    get:
      tags:
        - Resume
      security:
        - bearerAuth: []
      responses:
        "200":
          description: successfully operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
        "400":
          description: unauthorized access token.
        "422":
          description: means that the requirements in the request body are not met correctly.

  /resume/{id}:
    get:
      tags:
        - Resume
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
      responses:
        "200":
          description: successfully operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeDetailDTO'
        "400":
          description: unauthorized access token.
        "422":
          description: means that the requirements in the request path are not met correctly.
    put:
      tags:
        - Resume
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeDetailDTOReq'
      responses:
        "204":
          description: operation successfully.
        "400":
          description: unauthorized access token.
        "422":
          description: means that the requirements in the request path are not met correctly.


  /scoring/{id}:
    get:
      tags:
        - Resume
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ResumeDetailDTO:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        userID:
          type: string
          example: "user_001"
        personalDetails:
          $ref: '#/components/schemas/PersonalDetails'
        professionalExperience:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        leadershipExperience:
          type: array
          items:
            $ref: '#/components/schemas/Leadership'
        others:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
      example:
        id: "12345"
        userID: "user_001"
        personalDetails:
          fullName: "John Doe"
          phoneNumber: "123-456-7890"
          email: "john.doe@example.com"
          linkedin: "https://linkedin.com/in/johndoe"
          portfolioUrl: "https://johndoe.dev"
          description: "Software Engineer with 5 years of experience."
          addressString: "123 Main St, Springfield, IL"
        professionalExperience:
          - startDate:
              month: "January"
              year: 2020
            endDate:
              month: "March"
              year: 2022
            roleTitle: "Senior Developer"
            companyName: "Tech Solutions"
            location: "New York, NY"
            current: false
            elaboration:
              - text: "Led the development of a major e-commerce platform."
        education:
          - startDate:
              month: "September"
              year: 2015
            endDate:
              month: "May"
              year: 2019
            school: "University of Illinois"
            location: "Urbana-Champaign, IL"
            degreeLevel: "Bachelor's"
            major: "Computer Science"
            gpa: 3.8
            maxGpa: 4.0
            elaboration:
              - text: "Completed thesis on machine learning algorithms."
        leadershipExperience:
          - startDate:
              month: "June"
              year: 2019
            endDate:
              month: "August"
              year: 2020
            roleTitle: "Project Lead"
            organisationName: "Open Source Initiative"
            location: "Remote"
            current: false
            elaboration:
              - text: "Coordinated a team of developers for an open-source project."
        others:
          - elaboration:
              text: "2nd Place on Hackathon"
            name: "Best Paper Award"
            date:
              month: "October"
              year: 2020
            category: "Achievements"
          - elaboration:
              text: "AWS Devops Certification"
            name: "Best Paper Award"
            date:
              month: "October"
              year: 2020
            category: "Certificates"
          - elaboration:
              text: "Python"
            name: "Best Paper Award"
            date:
              month: "October"
              year: 2020
            category: "Skills"

    ResumeDetailDTOReq:
      type: object
      properties:
        personalDetails:
          $ref: '#/components/schemas/PersonalDetails'
        professionalExperience:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        leadershipExperience:
          type: array
          items:
            $ref: '#/components/schemas/Leadership'
        others:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
      example:
        personalDetails:
          fullName: "John Doe"
          phoneNumber: "123-456-7890"
          email: "john.doe@example.com"
          linkedin: "https://linkedin.com/in/johndoe"
          portfolioUrl: "https://johndoe.dev"
          description: "Software Engineer with 5 years of experience."
          addressString: "123 Main St, Springfield, IL"
        professionalExperience:
          - startDate:
              month: "January"
              year: 2020
            endDate:
              month: "March"
              year: 2022
            roleTitle: "Senior Developer"
            companyName: "Tech Solutions"
            location: "New York, NY"
            current: false
            elaboration:
              - text: "Led the development of a major e-commerce platform."
        education:
          - startDate:
              month: "September"
              year: 2015
            endDate:
              month: "May"
              year: 2019
            school: "University of Illinois"
            location: "Urbana-Champaign, IL"
            degreeLevel: "Bachelor's"
            major: "Computer Science"
            gpa: 3.8
            maxGpa: 4.0
            elaboration:
              - text: "Completed thesis on machine learning algorithms."
        leadershipExperience:
          - startDate:
              month: "June"
              year: 2019
            endDate:
              month: "August"
              year: 2020
            roleTitle: "Project Lead"
            organisationName: "Open Source Initiative"
            location: "Remote"
            current: false
            elaboration:
              - text: "Coordinated a team of developers for an open-source project."
        others:
          - elaboration:
              text: "2nd Place on Hackathon"
            name: "Best Paper Award"
            date:
              month: "October"
              year: 2020
            category: "Achievements"
          - elaboration:
              text: "AWS Devops Certification"
            name: "Best Paper Award"
            date:
              month: "October"
              year: 2020
            category: "Certificates"
          - elaboration:
              text: "Python"
            name: "Best Paper Award"
            date:
              month: "October"
              year: 2020
            category: "Skills"

    PersonalDetails:
      type: object
      properties:
        fullName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        linkedin:
          type: string
        portfolioUrl:
          type: string
        description:
          type: string
        addressString:
          type: string

    Experience:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        roleTitle:
          type: string
        companyName:
          type: string
        location:
          type: string
        current:
          type: boolean
        elaboration:
          type: array
          items:
            $ref: '#/components/schemas/Elaboration'

    Education:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        school:
          type: string
        location:
          type: string
        degreeLevel:
          type: string
        major:
          type: string
        gpa:
          type: number
        maxGpa:
          type: number
        elaboration:
          type: array
          items:
            $ref: '#/components/schemas/Elaboration'

    Leadership:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        roleTitle:
          type: string
        organisationName:
          type: string
        location:
          type: string
        current:
          type: boolean
        elaboration:
          type: array
          items:
            $ref: '#/components/schemas/Elaboration'

    Achievement:
      type: object
      properties:
        elaboration:
          $ref: '#/components/schemas/Elaboration'
        name:
          type: string
        date:
          $ref: '#/components/schemas/Date'
        category:
          type: string

    Date:
      type: object
      properties:
        month:
          type: string
        year:
          type: integer

    Elaboration:
      type: object
      properties:
        text:
          type: string