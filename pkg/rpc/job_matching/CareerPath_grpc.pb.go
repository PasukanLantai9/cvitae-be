// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/rpc/proto/CareerPath.proto

package jobMatching

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CareerPath_CompareCV_FullMethodName = "/jobmatching.CareerPath/CompareCV"
	CareerPath_FindJobs_FullMethodName  = "/jobmatching.CareerPath/FindJobs"
	CareerPath_Check_FullMethodName     = "/jobmatching.CareerPath/Check"
	CareerPath_Watch_FullMethodName     = "/jobmatching.CareerPath/Watch"
)

// CareerPathClient is the client API for CareerPath service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Job matching service
type CareerPathClient interface {
	// Method to compare CV and return score and advice
	CompareCV(ctx context.Context, in *CompareCVRequest, opts ...grpc.CallOption) (*CompareCVResponse, error)
	// Method to find suitable jobs based on experience and skills
	FindJobs(ctx context.Context, in *FindJobsRequest, opts ...grpc.CallOption) (*FindJobsResponse, error)
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthCheckResponse], error)
}

type careerPathClient struct {
	cc grpc.ClientConnInterface
}

func NewCareerPathClient(cc grpc.ClientConnInterface) CareerPathClient {
	return &careerPathClient{cc}
}

func (c *careerPathClient) CompareCV(ctx context.Context, in *CompareCVRequest, opts ...grpc.CallOption) (*CompareCVResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompareCVResponse)
	err := c.cc.Invoke(ctx, CareerPath_CompareCV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careerPathClient) FindJobs(ctx context.Context, in *FindJobsRequest, opts ...grpc.CallOption) (*FindJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindJobsResponse)
	err := c.cc.Invoke(ctx, CareerPath_FindJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careerPathClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, CareerPath_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careerPathClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthCheckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CareerPath_ServiceDesc.Streams[0], CareerPath_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HealthCheckRequest, HealthCheckResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CareerPath_WatchClient = grpc.ServerStreamingClient[HealthCheckResponse]

// CareerPathServer is the server API for CareerPath service.
// All implementations must embed UnimplementedCareerPathServer
// for forward compatibility.
//
// Job matching service
type CareerPathServer interface {
	// Method to compare CV and return score and advice
	CompareCV(context.Context, *CompareCVRequest) (*CompareCVResponse, error)
	// Method to find suitable jobs based on experience and skills
	FindJobs(context.Context, *FindJobsRequest) (*FindJobsResponse, error)
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, grpc.ServerStreamingServer[HealthCheckResponse]) error
	mustEmbedUnimplementedCareerPathServer()
}

// UnimplementedCareerPathServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCareerPathServer struct{}

func (UnimplementedCareerPathServer) CompareCV(context.Context, *CompareCVRequest) (*CompareCVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareCV not implemented")
}
func (UnimplementedCareerPathServer) FindJobs(context.Context, *FindJobsRequest) (*FindJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindJobs not implemented")
}
func (UnimplementedCareerPathServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedCareerPathServer) Watch(*HealthCheckRequest, grpc.ServerStreamingServer[HealthCheckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedCareerPathServer) mustEmbedUnimplementedCareerPathServer() {}
func (UnimplementedCareerPathServer) testEmbeddedByValue()                    {}

// UnsafeCareerPathServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CareerPathServer will
// result in compilation errors.
type UnsafeCareerPathServer interface {
	mustEmbedUnimplementedCareerPathServer()
}

func RegisterCareerPathServer(s grpc.ServiceRegistrar, srv CareerPathServer) {
	// If the following call pancis, it indicates UnimplementedCareerPathServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CareerPath_ServiceDesc, srv)
}

func _CareerPath_CompareCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareCVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareerPathServer).CompareCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CareerPath_CompareCV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareerPathServer).CompareCV(ctx, req.(*CompareCVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CareerPath_FindJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareerPathServer).FindJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CareerPath_FindJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareerPathServer).FindJobs(ctx, req.(*FindJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CareerPath_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareerPathServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CareerPath_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareerPathServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CareerPath_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CareerPathServer).Watch(m, &grpc.GenericServerStream[HealthCheckRequest, HealthCheckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CareerPath_WatchServer = grpc.ServerStreamingServer[HealthCheckResponse]

// CareerPath_ServiceDesc is the grpc.ServiceDesc for CareerPath service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CareerPath_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobmatching.CareerPath",
	HandlerType: (*CareerPathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompareCV",
			Handler:    _CareerPath_CompareCV_Handler,
		},
		{
			MethodName: "FindJobs",
			Handler:    _CareerPath_FindJobs_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _CareerPath_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _CareerPath_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/rpc/proto/CareerPath.proto",
}
